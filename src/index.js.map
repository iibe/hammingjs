{"version":3,"file":"index.js","sources":["index.ts"],"sourcesContent":["/**\n * Returns encoded binary string.\n */\nexport function encode(message: string): string {\n  if (!message.match(/^[01]+$/)) {\n    throw new Error(`Should be a binary string: ${message}`);\n  }\n\n  // find control bits positions\n  const controlBits: number[] = [];\n  while (\n    controlBits.length <\n    Math.ceil(Math.log2(message.length + controlBits.length + 1))\n  ) {\n    controlBits.push((1 << controlBits.length) - 1);\n  }\n\n  // transfort bitword to array for mutability\n  const bitword: string[] = [...message];\n\n  // insert control bits in bitword\n  for (const bit of controlBits) {\n    bitword.splice(bit, 0, \"0\");\n  }\n\n  // initialize a table of transformation\n  const table: string[][] = [\n    bitword,\n    ...Array.from({ length: controlBits.length }, () => []),\n  ];\n\n  // put col number (in binary format) at according col position\n  for (let col = 1; col <= bitword.length; col++) {\n    const binary: string = (col >>> 0)\n      .toString(2)\n      .padStart(controlBits.length, \"0\");\n    for (let row = 1; row <= controlBits.length; row++) {\n      table[row].push(binary[binary.length - row]);\n    }\n  }\n\n  // calculate matches for bitword with control bits\n  for (let row = 1; row < table.length; row++) {\n    let match: number = 0;\n    for (let col = 0; col < bitword.length; col++) {\n      if (table[row][col] === bitword[col] && bitword[col] === \"1\") {\n        match++;\n      }\n    }\n    bitword[controlBits[row - 1]] = (match % 2).toString();\n  }\n\n  return bitword.join(\"\");\n}\n\n/**\n * Detects error position in encoded message.\n */\nexport function detect(encoded: string): number {\n  if (!encoded.match(/^[01]+$/)) {\n    throw new Error(`Should be a binary string: ${encoded}`);\n  }\n\n  // find control bits positions\n  const controlBits: number[] = [];\n  while (\n    controlBits.length <\n    Math.ceil(Math.log2(encoded.length + controlBits.length + 1))\n  ) {\n    controlBits.push((1 << controlBits.length) - 1);\n  }\n\n  // transfort bitword to array for mutability\n  const bitword: string[] = [...encoded];\n\n  // initialize a table of transformation\n  const table: string[][] = [\n    bitword,\n    ...Array.from({ length: controlBits.length }, () => []),\n  ];\n\n  // put col number (in binary format) at according col position\n  for (let col = 1; col <= bitword.length; col++) {\n    const binary: string = (col >>> 0)\n      .toString(2)\n      .padStart(controlBits.length, \"0\");\n    for (let row = 1; row <= controlBits.length; row++) {\n      table[row].push(binary[binary.length - row]);\n    }\n  }\n\n  // error position in binary representation\n  const error: number[] = [];\n\n  // calculate matches for bitword with control bits\n  for (let row = 1; row < table.length; row++) {\n    let match: number = 0;\n    for (let col = 0; col < bitword.length; col++) {\n      if (table[row][col] === bitword[col] && bitword[col] === \"1\") {\n        match++;\n      }\n    }\n    error.push(match % 2);\n  }\n\n  // return error position\n  return parseInt(error.reverse().join(\"\"), 2) - 1;\n}\n\n/**\n * Returns decoded binary string message.\n */\nexport function decode(error: string): string {\n  const bug: number = detect(error);\n  const fix: string = error[bug] === \"0\" ? \"1\" : \"0\";\n  const err: string[] = [...error];\n  err[bug] = fix;\n  return [...err].join(\"\");\n}\n"],"names":[],"mappings":"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"}